package tea.entity.node;

import java.math.BigDecimal;
import tea.db.DbAdapter;
import java.sql.SQLException;
import tea.entity.*;
import tea.entity.member.*;
import tea.html.*;
import java.util.*;
import java.sql.SQLException;

public class Resume
{
    private static Cache _cache = new Cache();
    private boolean exists;
    private int node;
    private int language;
    private String joinu;
    private String intr1;
    private String intr2;
    private String intr3;
    private String nowmaincareer;
    private String zxrgs;
    private String nowcareerlevel;
    private int experience;
    private boolean hasabroad;
    private BigDecimal salarysum;
    private String zwaers_yx;
    private int zqwgz;
    private String expectcareer;
    private String expectcity;
    private BigDecimal expectsalarysum;
    private String zwaers_qwyx;
    private int joindatetype;
    private String selfvalue;
    private String selfaim;
    private String other;

    public static Resume find(int node, int language) throws SQLException
    {
        Resume obj = (Resume) _cache.get(node + ":" + language);
        if (obj == null)
        {
            obj = new Resume(node, language);
            _cache.put(node + ":" + language, obj);
        }
        return obj;
    }

    public Resume(int node, int language) throws SQLException
    {
        this.node = node;
        this.language = language;
        loadBasic();
    }

    public void set(String joinu, String intr1, String intr2, String intr3, String nowmaincareer, String zxrgs, String nowcareerlevel, int experience, boolean hasabroad, BigDecimal salarysum, String zwaers_yx, int zqwgz, String expectcareer, String expectcity, BigDecimal expectsalarysum, String zwaers_qwyx, int joindatetype) throws SQLException
    {
        if (isExists())
        {
            DbAdapter db = new DbAdapter();
            try
            {
                db.executeUpdate("UPDATE Resume SET joinu=" + DbAdapter.cite(joinu) + ",intr1=" + DbAdapter.cite(intr1) + ",intr2=" + DbAdapter.cite(intr2) + ",intr3=" + DbAdapter.cite(intr3) + ",nowmaincareer=" + DbAdapter.cite(nowmaincareer) + ",zxrgs=" + DbAdapter.cite(zxrgs) + ",nowcareerlevel=" + DbAdapter.cite(nowcareerlevel) + ",experience=" + (experience) + ",hasabroad=" + DbAdapter.cite(hasabroad) + ",salarysum=" + (salarysum) + ",zwaers_yx=" + DbAdapter.cite(zwaers_yx)
                                 + ",zqwgz=" + zqwgz + ",expectcareer=" + DbAdapter.cite(expectcareer) + ",expectcity=" + DbAdapter.cite(expectcity) + ",expectsalarysum=" + (expectsalarysum) + ",zwaers_qwyx=" + DbAdapter.cite(zwaers_qwyx) + ",joindatetype=" + (joindatetype) + " WHERE node=" + node + " AND language=" + language);
            } finally
            {
                db.close();
            }
            this.joinu = joinu;
            this.intr1 = intr1;
            this.intr2 = intr2;
            this.intr3 = intr3;
            this.nowmaincareer = nowmaincareer;
            this.zxrgs = zxrgs;
            this.nowcareerlevel = nowcareerlevel;
            this.experience = experience;
            this.hasabroad = hasabroad;
            this.salarysum = salarysum;
            this.zwaers_yx = zwaers_yx;
            this.zqwgz = zqwgz;
            this.expectcareer = expectcareer;
            this.expectcity = expectcity;
            this.expectsalarysum = expectsalarysum;
            this.zwaers_qwyx = zwaers_qwyx;
            this.joindatetype = joindatetype;
        } else
        {
            create(node, language, joinu, intr1, intr2, intr3, nowmaincareer, zxrgs, nowcareerlevel, experience, hasabroad, salarysum, zwaers_yx, zqwgz, expectcareer, expectcity, expectsalarysum, zwaers_qwyx, joindatetype);
        }
    }

    public void set(String selfvalue, String selfaim, String other) throws SQLException
    {
        DbAdapter db = new DbAdapter();
        try
        {
            db.executeUpdate("UPDATE Resume SET selfvalue=" + DbAdapter.cite(selfvalue) + ",selfaim=" + DbAdapter.cite(selfaim) + ",other=" + DbAdapter.cite(other) + " WHERE node=" + node + " AND language=" + language);
        } finally
        {
            db.close();
        }
        this.selfvalue = selfvalue;
        this.selfaim = selfaim;
        this.other = other;
    }

    public static void create(int node, int language, String joinu, String intr1, String intr2, String intr3, String nowmaincareer, String zxrgs, String nowcareerlevel, int experience, boolean hasabroad, BigDecimal salarysum, String zwaers_yx, int zqwgz, String expectcareer, String expectcity, BigDecimal expectsalarysum, String zwaers_qwyx, int joindatetype) throws SQLException
    {
        DbAdapter db = new DbAdapter();
        try
        {
            db.executeUpdate("INSERT INTO Resume(node,language,joinu,intr1,intr2,intr3,nowmaincareer,zxrgs,nowcareerlevel,experience,hasabroad,salarysum,zwaers_yx,zqwgz,expectcareer,expectcity,expectsalarysum,zwaers_qwyx,joindatetype)VALUES(" + node + "," + language + "," + DbAdapter.cite(joinu) + "," + DbAdapter.cite(intr1) + "," + DbAdapter.cite(intr2) + "," + DbAdapter.cite(intr3) + "," + DbAdapter.cite(nowmaincareer) + "," + DbAdapter.cite(zxrgs) + ","
                             + DbAdapter.cite(nowcareerlevel) + "," + (experience) + "," + DbAdapter.cite(hasabroad) + "," + (salarysum) + "," + DbAdapter.cite(zwaers_yx) + "," + (zqwgz) + "," + DbAdapter.cite(expectcareer) + "," + DbAdapter.cite(expectcity) + "," + (expectsalarysum) + "," + DbAdapter.cite(zwaers_qwyx) + "," + (joindatetype) + ")");
        } finally
        {
            db.close();
        }
        _cache.remove(node + ":" + language);
    }

    public void delete()
    {
        DbAdapter db = new DbAdapter();
        try
        {
            db.executeUpdate("DELETE FROM Resume WHERE node=" + node + " AND language=" + language);

        } catch (SQLException ex)
        {
            ex.printStackTrace();
        } finally
        {
            db.close();
        }
        _cache.remove(node + ":" + language);
    }

    private void loadBasic() throws SQLException
    {
        DbAdapter db = new DbAdapter();
        try
        {
            // int j = db.getInt("ResumeGetLanguage " + node + "," + language);
            int j = this.getLanguage(language);
            db.executeQuery("SELECT joinu,intr1,intr2,intr3,nowmaincareer,zxrgs,nowcareerlevel,experience,hasabroad,salarysum,zwaers_yx,zqwgz,expectcareer,expectcity,expectsalarysum,zwaers_qwyx,joindatetype,selfvalue,selfaim,other FROM Resume WHERE node=" + node + "  AND language=" + j);
            if (db.next())
            {
                joinu = db.getVarchar(j, language, 1);
                intr1 = db.getVarchar(j, language, 2);
                intr2 = db.getVarchar(j, language, 3);
                intr3 = db.getVarchar(j, language, 4);
                nowmaincareer = db.getString(5);
                zxrgs = db.getVarchar(j, language, 6);
                nowcareerlevel = db.getString(7);
                experience = db.getInt(8);
                hasabroad = db.getInt(9) != 0;
                salarysum = db.getBigDecimal(10, 2);
                zwaers_yx = db.getString(11);
                zqwgz = db.getInt(12);
                expectcareer = db.getVarchar(j, language, 13);
                expectcity = db.getVarchar(j, language, 14);
                expectsalarysum = db.getBigDecimal(15, 2);
                zwaers_qwyx = db.getString(16);
                joindatetype = db.getInt(17);
                selfvalue = db.getVarchar(j, language, 18);
                selfaim = db.getVarchar(j, language, 19);
                other = db.getVarchar(j, language, 20);
                exists = true;
            } else
            {
                exists = false;
            }
        } finally
        {
            db.close();
        }
    }

    private int getLanguage(int language) throws SQLException
    {
        Vector v = new Vector();
        DbAdapter db = new DbAdapter();
        try
        {
            db.executeQuery("SELECT language FROM Resume WHERE node=" + node);
            while (db.next())
            {
                v.addElement(new Integer(db.getInt(1)));
            }
        } finally
        {
            db.close();
        }
        if (v.indexOf(new Integer(language)) != -1)
        {
            return language;
        } else
        {
            if (language == 1)
            {
                if (v.indexOf(new Integer(2)) != -1)
                {
                    return 2;
                }
            } else if (language == 2)
            {
                if (v.indexOf(new Integer(1)) != -1)
                {
                    return 1;
                }
            }
            if (v.size() < 1)
            {
                return 0;
            }
        }
        return ((Integer) v.elementAt(0)).intValue();
    }

    public static Enumeration getNode(String member, int language) throws SQLException
    {
        Vector vector = new Vector();
        DbAdapter db = new DbAdapter();
        try
        {
            db.executeQuery("SELECT r.node FROM Resume r,Node n WHERE r.node=n.node AND n.vcreator=" + DbAdapter.cite(member) + " AND r.language=" + language);
            while (db.next())
            {
                vector.addElement(new Integer(db.getInt(1)));
            }
        } finally
        {
            db.close();
        }
        return vector.elements();
    }

    /**
     * getDetail
     *
     * @param i
     *            int
     * @param listing
     *            int
     * @param iLanguage
     *            int
     * @return Enumeration
     */
    public static Text getDetail(Node node, int language, int listing, String target) throws SQLException
    {
        Span span = null;
        StringBuffer content_sb = new StringBuffer();

        Resume job = Resume.find(node._nNode, language);
        if (job.isExists())
        {
            Profile profile = Profile.find(node.getCreator()._strR);
            Enumeration listingDetailEnumeration = ListingDetail.find(listing, 52, language);
            while (listingDetailEnumeration.hasMoreElements())
            {
                ListingDetail detail = (ListingDetail) listingDetailEnumeration.nextElement();
                String value = null;
                if (detail.getItemName().equals("name"))
                {
                    value = (profile.getFirstName(language) + profile.getLastName(language));
                } else if (detail.getItemName().equals("Sex"))
                {
                    if (profile.isSex())
                    {
                        value = ("男");
                    } else
                    {
                        value = ("女");
                    }
                } else if (detail.getItemName().equals("Birth"))
                {
                    if (profile.getBirth() != null)
                    {
                        value = (new java.text.SimpleDateFormat("yyyy/MM").format(profile.getBirth()));
                    }
                } else if (detail.getItemName().equals("State"))
                {
                    value = (profile.getState(language));
                } else /*
                 * if (detail.getItemName().equals("Degree")) { value=(DegreeSelection.getDegree(profile.getDegree(language))); } else if (detail.getItemName().equals("NowTrade")) { value=(job.getNowTrade()); } else if (detail.getItemName().equals("Experience")) { value=(job.getExperience()); } else if (detail.getItemName().equals("ExpectCity")) { value=(job.getExpectCity()); } else
                 */
                if (detail.getItemName().equals("EmailAddress"))
                {
                    value = (profile.getEmail());
                } else if (detail.getItemName().equals("Checkbox"))
                {
                    value = ("<input type=checkbox name=" + node._nNode + "/ >");
                } else if (detail.getItemName().equals("MajorCategory"))
                {
                    StringBuffer sb = new StringBuffer();
                    Enumeration enumeration = Educate.find(node._nNode, language);
                    while (enumeration.hasMoreElements())
                    {
                        Educate educate = Educate.find(((Integer) enumeration.nextElement()).intValue());
                        sb.append(tea.htmlx.MajorSelection.getMajor(educate.getMajorCategory()) + " ");
                    }
                    value = (sb.toString());
                } else if (detail.getItemName().equals("Mobile"))
                {
                    value = (profile.getMobile());
                } else if (detail.getItemName().equals("Photo"))
                {
                    value = ("<img src=\"/servlet/PhotoPicture?member=" + node.getCreator()._strV + "\" />");
                } else if (detail.getItemName().equals("Address"))
                {
                    value = (profile.getAddress(language));
                } else if (detail.getItemName().equals("NowTrade"))
                {
                    // value=(job.getNowTrade());
                } else if (detail.getItemName().equals("NowMainCareer"))
                {
                    value = (job.getNowmaincareer());
                } else if (detail.getItemName().equals("NowCareerLevel"))
                {
                    value = (job.getNowcareerlevel());
                } else if (detail.getItemName().equals("Experience"))
                {
                    value = String.valueOf(job.getExperience());
                }
                /*
                 * else if (detail.getItemName().equals("HasAbroad")) { value=(job.isHasAbroad() ? "有" : "无"); } else if (detail.getItemName().equals("SalarySum")) { value=(job.getSalarySum()); } else if (detail.getItemName().equals("ExpectWorkKind")) { value=(job.getExpectWorkKind()); } else if (detail.getItemName().equals("ExpectTrade")) { value=(job.getExpectTrade()); } else if (detail.getItemName().equals("ExpectCareer")) {
                 * value=(job.getExpectCareer()); } else if (detail.getItemName().equals("ExpectSalarySum")) { value=(job.getExpectSalarySum()); } else if (detail.getItemName().equals("JoinDateType")) { value=(job.getJoinDateType()); } else if (detail.getItemName().equals("SelfValue")) { value=(job.getSelfValue()); } else if (detail.getItemName().equals("SelfAim")) { value=(job.getSelfAim()); }
                 */
                if (detail.getAnchor() != 0)
                {
                    Anchor anchor = new Anchor("/servlet/Resume?node=" + node._nNode + "&language=" + language, value);
                    anchor.setTarget(target);
                    span = new Span(anchor);
                } else
                {
                    span = new Span(value);
                }
                span.setId("ResumeID" + detail.getItemName());
                content_sb.append(detail.getBeforeItem() + span + detail.getAfterItem());
            }
        }
        return new Text(content_sb.toString());
    }

    public boolean isExists()
    {
        return exists;
    }

    public int getNode()
    {
        return node;
    }

    public int getLanguage()
    {
        return language;
    }

    public String getJoinu()
    {
        return joinu;
    }

    public String getIntr1()
    {
        return intr1;
    }

    public String getIntr2()
    {
        return intr2;
    }

    public String getIntr3()
    {
        return intr3;
    }

    public String getNowmaincareer()
    {
        return nowmaincareer;
    }

    public String getZxrgs()
    {
        return zxrgs;
    }

    public String getNowcareerlevel()
    {
        return nowcareerlevel;
    }

    public boolean isHasabroad()
    {
        return hasabroad;
    }

    public BigDecimal getSalarysum()
    {
        return salarysum;
    }

    public String getZwaers_yx()
    {
        return zwaers_yx;
    }

    public int getZqwgz()
    {
        return zqwgz;
    }

    public String getExpectcareer()
    {
        return expectcareer;
    }

    public String getExpectcity()
    {
        return expectcity;
    }

    public BigDecimal getExpectsalarysum()
    {
        return expectsalarysum;
    }

    public String getZwaers_qwyx()
    {
        return zwaers_qwyx;
    }

    public int getJoindatetype()
    {
        return joindatetype;
    }

    public int getExperience()
    {
        return experience;
    }

    public String getSelfvalue()
    {
        return selfvalue;
    }

    public String getSelfaim()
    {
        return selfaim;
    }

    public String getOther()
    {
        return other;
    }
}
