package tea.service;

import java.sql.SQLException;
import java.awt.Frame;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Date;
import java.util.Enumeration;
import javax.mail.FetchProfile;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.internet.InternetAddress;
import tea.entity.RV;
import tea.entity.member.EmailBox;
import tea.entity.member.Profile;
import tea.entity.site.*;

// Referenced classes of package tea.service:
//            Service, Robot

class GetEmail extends Service implements Runnable
{

	public GetEmail(int i, int j)
	{
		super(i, j);
	}

	public void run()
	{
		try
		{
			while (Robot._blStarted)
			{
				long l = System.currentTimeMillis();
				clearLog();
				addLog("Start");
				setTitle(" Getting Email(s) for each member  ... ");
				Enumeration e = Community.find("", 0, Integer.MAX_VALUE);
				while (e.hasMoreElements())
				{
					String community = (String) e.nextElement();

					for (Enumeration enumeration = Profile.findByCommunity(community, "", 0, Integer.MAX_VALUE); enumeration.hasMoreElements();)
					{
						String s = (String) enumeration.nextElement();
						RV rv = new RV(s, community);
						for (Enumeration enumeration1 = EmailBox.find(community, rv._strR); enumeration1.hasMoreElements();)
						{
							String s1 = (String) enumeration1.nextElement();
							EmailBox emailbox = EmailBox.find(community, rv._strR, s1);
							int i = 1;
							int j = emailbox.getPop3Options();
							if ((j & 0x4) != 0)
								getEmails(community, s1, rv, i);
						}
					}

					addLog("Stop");
					long l1 = l + 0x36ee80L;
					long l2 = l1 - System.currentTimeMillis();
					if (l2 > 0L)
					{
						setStatus("  Idling until " + new Date(l1));
						try
						{
							Thread.sleep(l2);
						} catch (Exception exception1)
						{
						}
					}
				}
			}
		} catch (Exception exception)
		{
			exception.printStackTrace();
		}
	}

	public void getEmails(String community, String s, RV rv, int i) throws Exception
	{
		EmailBox emailbox = EmailBox.find(community, rv._strR, s);
		String strPop3User = emailbox.getPop3User();
		String strPop3Passwd = emailbox.getPop3Passwd();
		if (strPop3User == null || strPop3User.length() == 0 || strPop3Passwd == null || strPop3Passwd.length() == 0)
			return;
		boolean flag = false;
		try
		{
			Folder folder = emailbox.openFolder();
			if (folder != null)
			{
				int j = folder.getMessageCount();
				if (j == 0)
					return;
				Message amessage[] = folder.getMessages();
				FetchProfile fetchprofile = new FetchProfile();
				fetchprofile.add(javax.mail.FetchProfile.Item.ENVELOPE);
				fetchprofile.add("X-mailer");
				folder.fetch(amessage, fetchprofile);
				for (int k = 0; k < amessage.length; k++)
				{
					String s3 = null;
					Object obj = null;
					javax.mail.Address aaddress[];
					if ((aaddress = amessage[k].getFrom()) != null)
					{
						for (int l = 0; l < aaddress.length; l++)
						{
							InternetAddress internetaddress = (InternetAddress) aaddress[l];
							s3 = internetaddress.getAddress();
							String s4 = internetaddress.getPersonal();
						}

					}
					Date date = amessage[k].getSentDate();
					String s5 = amessage[k].getSubject();
					if (s3.toLowerCase().indexOf("163.com") != -1)
						try
						{
							s5 = new String(s5.getBytes("gb2312"), "ISO-8859-1");
						} catch (Exception exception2)
						{
						}
					if (s5 == null || s5.length() == 0)
						s5 = "<No Subject>";
					String s6 = s;
					String s7 = "";
					String s8 = "";
					String s9 = null;
					int j1 = 0;
					int k1 = 0;
					byte abyte0[] = null;
					byte abyte1[] = null;
					String s10 = null;
					byte abyte2[] = null;
					int l1 = 0;
					try
					{
						l1 = tea.entity.member.Message.create(community, rv, s3, j1, 0, 0, k1, i, s5, s9, null, null, s10, null, s6, s7, s8, null, null, 0, 0);
					} catch (Exception exception3)
					{
					}
					tea.entity.member.Message message = tea.entity.member.Message.find(l1);
					message.setTime(date);
					boolean flag1 = false;
					outPart(message, amessage[k], 0, s3, flag1);
				}

				emailbox.closeFolder();
				Socket socket = null;
				PrintWriter printwriter = null;
				BufferedReader bufferedreader = null;
				try
				{
					socket = new Socket(emailbox.getPop3Server(), emailbox.getPop3Port());
					socket.setSoTimeout(30000);
					printwriter = new PrintWriter(socket.getOutputStream(), true);
					bufferedreader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
					bufferedreader.readLine();
					printwriter.println("USER " + strPop3User);
					bufferedreader.readLine();
					printwriter.println("PASS " + strPop3Passwd);
					bufferedreader.readLine();
					for (int i1 = 1; i1 <= j; i1++)
					{
						printwriter.println("DELE " + i1);
						bufferedreader.readLine();
					}

					printwriter.println("QUIT");
					bufferedreader.readLine();
					printwriter.close();
					bufferedreader.close();
					socket.close();
				} catch (Exception exception1)
				{
				} finally
				{
					if (printwriter != null)
						try
						{
							printwriter.close();
						} catch (Exception exception5)
						{
						}
					if (bufferedreader != null)
						try
						{
							bufferedreader.close();
						} catch (Exception exception6)
						{
						}
					if (socket != null)
						try
						{
							socket.close();
						} catch (Exception exception7)
						{
						}
				}
			}
		} catch (Exception exception)
		{
			exception.printStackTrace();
		}
	}

	int outPart(tea.entity.member.Message message, Part part, int i, String s, boolean flag) throws Exception
	{
		int j = i;
		if (part.isMimeType("text/*"))
		{
			Object obj = part.getContent();
			String strPop3User = obj.toString();
			String strPop3Passwd = null;
			try
			{
				strPop3Passwd = part.getFileName();
			} catch (Exception exception)
			{
			}
			if (strPop3Passwd != null)
			{
				j++;
				if (strPop3Passwd.toLowerCase().endsWith(".rtf"))
				{
					BufferedInputStream bufferedinputstream1 = new BufferedInputStream((InputStream) obj);
					int i1 = bufferedinputstream1.available();
					byte abyte1[] = new byte[i1];
					bufferedinputstream1.read(abyte1, 0, i1 - 1);
					message.createAttachment(j, strPop3Passwd, abyte1);
				} else
				{
					message.createAttachment(j, strPop3Passwd, strPop3User.getBytes("ISO-8859-1"));
				}
			} else
			{
				boolean flag1 = false;
				if (flag && s.toLowerCase().indexOf("sina.com") != -1)
					flag1 = true;
				if (s.toLowerCase().endsWith("yahoo.com.cn"))
					flag1 = true;
				if (flag1)
					try
					{
						strPop3User = new String(strPop3User.getBytes("gb2312"), "ISO-8859-1");
					} catch (Exception exception1)
					{
					}
				message.setContent(strPop3User);
			}
		} else if (part.isMimeType("multipart/*"))
		{
			flag = true;
			Multipart multipart = (Multipart) part.getContent();
			for (int k = 0; k < multipart.getCount(); k++)
				j = outPart(message, ((Part) (multipart.getBodyPart(k))), j, s, flag);

		} else if (part.isMimeType("message/rfc822"))
		{
			j = outPart(message, (Part) part.getContent(), j, s, flag);
		} else
		{
			Object obj1 = part.getContent();
			if (obj1 instanceof InputStream)
			{
				j++;
				BufferedInputStream bufferedinputstream = new BufferedInputStream((InputStream) obj1);
				int l = bufferedinputstream.available();
				byte abyte0[] = new byte[l];
				bufferedinputstream.read(abyte0, 0, l - 1);
				message.createAttachment(j, part.getFileName(), abyte0);
			}
		}
		return j;
	}
}
