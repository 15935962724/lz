// Decompiled by Jad v1.5.7g. Copyright 2000 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/SiliconValley/Bridge/8617/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   OfferBuy.java

package tea.ui.node.type.buy;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Enumeration;
import javax.servlet.*;
import javax.servlet.http.*;
import tea.entity.RV;
import tea.entity.node.*;
import tea.resource.Resource;
import tea.ui.TeaServlet;
import tea.ui.TeaSession;

public class OfferBuy extends TeaServlet
{

    public OfferBuy()
    {
    }

    public void service(HttpServletRequest httpservletrequest, HttpServletResponse httpservletresponse)
        throws ServletException, IOException
    {
        HttpSession httpsession = httpservletrequest.getSession(true);
        int i = ((Integer)httpsession.getValue("tea.Node")).intValue();
        try
        {
            TeaSession teasession = new TeaSession(httpservletrequest);
            if(teasession._rv == null)
            {
                outLogin(httpservletrequest, httpservletresponse, teasession);
                return;
            }
            int j = Integer.parseInt(httpservletrequest.getParameter("Currency"));
            String s = httpservletrequest.getParameter("Quantity");
            int k = 0;
            try
            {
                k = Integer.parseInt(s);
            }
            catch(Exception _ex) { }
            if(k == 0)
            {
                outText(httpservletresponse, teasession._nLanguage, r.getString(teasession._nLanguage, "InvalidQuantity"));
                return;
            }
            Commodity commodity = Commodity.find(teasession._nNode);
            if(!commodity.isValidQuantity(k))
            {
                outText(httpservletresponse, teasession._nLanguage, r.getString(teasession._nLanguage, "InvalidQuantity"));
                return;
            }
            BigDecimal bigdecimal = null;
            try
            {
                bigdecimal = new BigDecimal(httpservletrequest.getParameter("Price"));
            }
            catch(Exception _ex) { }
            if(bigdecimal == null)
            {
                outText(httpservletresponse, teasession._nLanguage, r.getString(teasession._nLanguage, "InvalidPrice"));
                return;
            }
            BuyPrice buyprice = BuyPrice.find(teasession._nNode, j);
            if(buyprice.getPrice() == null)
            {
                outText(httpservletresponse, teasession._nLanguage, r.getString(teasession._nLanguage, "InvalidPrice"));
                return;
            }
            if(bigdecimal.compareTo(buyprice.getPrice()) < 0)
            {
                outText(httpservletresponse, teasession._nLanguage, r.getString(teasession._nLanguage, "InfLowerReserve"));
                return;
            }
            if(i == teasession._nNode)
            {
                Buy.create(i, teasession._rv, j, bigdecimal, k, 0);
            } else
            {
                Node node = Node.find(i);
                int l = node.getType();
                if(l == 1)
                {
                    Category category = Category.find(i);
                    int j1 = category.getCategory();
                    if(j1 != 4 && j1 != 5 && j1 != 6)
                    {
                        int k1;
                        for(Enumeration enumeration1 = Node.findSons(i); enumeration1.hasMoreElements(); categoryBuy(teasession._nNode, teasession._rv, j, bigdecimal, k, k1))
                            k1 = ((Integer)enumeration1.nextElement()).intValue();

                    } else
                    {
                        Buy.create(teasession._nNode, teasession._rv, j, bigdecimal, k, i);
                    }
                } else
                if(l == 0)
                {
                    int i1;
                    for(Enumeration enumeration = Node.findSons(i); enumeration.hasMoreElements(); categoryBuy(teasession._nNode, teasession._rv, j, bigdecimal, k, i1))
                        i1 = ((Integer)enumeration.nextElement()).intValue();

                } else
                {
                    Buy.create(teasession._nNode, teasession._rv, j, bigdecimal, k, i);
                }
            }
            httpservletresponse.sendRedirect("Node?Node=" + i);
            return;
        }
        catch(Exception exception)
        {
            httpservletresponse.sendError(400, exception.toString());
            exception.printStackTrace();
            return;
        }
    }

    public void init(ServletConfig servletconfig)
        throws ServletException
    {
        super.init(servletconfig);
        r.add("tea/ui/node/type/buy/OfferBuy");
    }

    public void categoryBuy(int i, RV rv, int j, BigDecimal bigdecimal, int k, int l)
        throws Exception
    {
        Node node = Node.find(l);
        int i1 = node.getType();
        if(i1 == 1)
        {
            Category category = Category.find(l);
            int k1 = category.getCategory();
            if(k1 != 4 && k1 != 5 && k1 != 6)
            {
                int l1;
                for(Enumeration enumeration1 = Node.findSons(l); enumeration1.hasMoreElements(); categoryBuy(i, rv, j, bigdecimal, k, l1))
                    l1 = ((Integer)enumeration1.nextElement()).intValue();

                return;
            } else
            {
                Buy.create(i, rv, j, bigdecimal, k, l);
                return;
            }
        }
        if(i1 == 0)
        {
            int j1;
            for(Enumeration enumeration = Node.findSons(l); enumeration.hasMoreElements(); categoryBuy(i, rv, j, bigdecimal, k, j1))
                j1 = ((Integer)enumeration.nextElement()).intValue();

            return;
        } else
        {
            Buy.create(i, rv, j, bigdecimal, k, l);
            return;
        }
    }
}
