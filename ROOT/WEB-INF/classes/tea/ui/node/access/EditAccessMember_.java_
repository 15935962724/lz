package tea.ui.node.access;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import tea.entity.*;
import tea.entity.node.*;
import tea.entity.member.*;
import tea.resource.Resource;
import tea.ui.TeaServlet;
import tea.ui.TeaSession;

public class EditAccessMember extends TeaServlet
{

    public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        request.setCharacterEncoding("UTF-8");
        try
        {
            TeaSession teasession = new TeaSession(request);
            if (teasession._rv == null)
            {
                outLogin(request, response, teasession);
                return;
            }
            Node node = Node.find(teasession._nNode);
            AccessMember obj_am = AccessMember.find(teasession._nNode, teasession._rv._strV);
            if (!teasession._rv.isWebMaster() && !teasession._rv.isOrganizer(node.getCommunity()) && !node.isCreator(teasession._rv) && obj_am.getPurview() != 3)
            {
                response.sendError(403);
                return;
            }
            String act = request.getParameter("act");
            if ("edit".equals(act))
            {
                String member = request.getParameter("member").trim().toLowerCase();
                if (!Profile.isExisted(member))
                {
                    response.sendRedirect("/jsp/info/Alert.jsp?info=" + java.net.URLEncoder.encode(r.getString(teasession._nLanguage, "InvalidMemberId"), "UTF-8"));
                    return;
                }
                int accessmember = Integer.parseInt(request.getParameter("accessmember"));
                int style = Integer.parseInt(request.getParameter("style"));
                int purview = Integer.parseInt(request.getParameter("purview"));
                boolean auditing = "true".equals(request.getParameter("auditing"));
                String type = request.getParameter("type");
                String category = request.getParameter("category");
                if (accessmember == 0)
                {
                    AccessMember.create(teasession._nNode, member, teasession._rv._strV, style, purview, auditing, type, category);
                } else
                {
                    AccessMember obj = AccessMember.find(accessmember);
                    obj.set(style, purview, auditing, type, category);
                }
            } else if ("extend".equals(act)) // 允许将来自父系的可继承权限传播给该对象
            {
                boolean extend = teasession.getParameter("extend") != null;
                node.setExtend(extend);
            } else if ("reset".equals(act)) // 重置所有子对象的权限并允许传播可继承权限
            {
                AccessMember.reset(teasession._nNode);
            } else if ("delete".equals(act))
            {
                int accessmember = Integer.parseInt(request.getParameter("accessmember"));
                AccessMember obj = AccessMember.find(accessmember);
                obj.delete();
            }
            String nu = request.getParameter("nexturl");
            if (nu == null)
            {
                nu = "/jsp/access/AccessMembers.jsp?node=" + teasession._nNode;
            }
            response.sendRedirect(nu);
        } catch (Exception exception)
        {
            response.sendError(400, exception.toString());
            exception.printStackTrace();
        }
    }
}
